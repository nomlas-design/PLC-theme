{"version":3,"file":"js/courses.js","mappings":"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","sources":["webpack://plc-theme/./assets/js/src/courses.ts"],"sourcesContent":["/**\r\n * Course Filtering and Sorting System\r\n *\r\n * This script handles the filtering and sorting of course items based on\r\n * user selection from dropdown menus.\r\n */\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  // Get references to all DOM elements\r\n  const formatFilter = document.getElementById(\r\n    'format-filter'\r\n  ) as HTMLSelectElement;\r\n  const availabilityFilter = document.getElementById(\r\n    'availability-filter'\r\n  ) as HTMLSelectElement;\r\n  const sortBySelector = document.getElementById(\r\n    'sort-by'\r\n  ) as HTMLSelectElement;\r\n  const courseGrid = document.querySelector('.courses-grid') as HTMLElement;\r\n  // Only select courses-child elements that are direct children of the courses-grid\r\n  const courseItems = document.querySelectorAll(\r\n    '.courses-grid > .courses-child'\r\n  ) as NodeListOf<HTMLElement>;\r\n\r\n  /**\r\n   * Applies all filters and sorts to the course items\r\n   */\r\n  const updateCourses = () => {\r\n    const formatValue = formatFilter.value;\r\n    const availabilityValue = availabilityFilter.value;\r\n    const sortValue = sortBySelector.value;\r\n\r\n    // First, filter courses\r\n    courseItems.forEach((item) => {\r\n      const itemType = item.getAttribute('data-type');\r\n      const itemOpen = item.getAttribute('data-open');\r\n\r\n      // Start with showing all items\r\n      let shouldShow = true;\r\n\r\n      // Apply format filter (if not 'all')\r\n      if (formatValue !== 'all') {\r\n        // Special case: when 'online' is selected, also show 'free' events\r\n        if (formatValue === 'online') {\r\n          if (itemType !== 'online' && itemType !== 'free') {\r\n            shouldShow = false;\r\n          }\r\n        } else if (itemType !== formatValue) {\r\n          shouldShow = false;\r\n        }\r\n      }\r\n\r\n      // Apply availability filter (if not 'all')\r\n      if (shouldShow && availabilityValue !== 'all') {\r\n        if (availabilityValue === 'upcoming' && itemOpen !== 'closed') {\r\n          shouldShow = false;\r\n        } else if (availabilityValue === 'open' && itemOpen !== 'open') {\r\n          shouldShow = false;\r\n        }\r\n      }\r\n\r\n      // Show or hide the item\r\n      item.style.display = shouldShow ? 'flex' : 'none';\r\n    });\r\n\r\n    // Then, sort visible courses\r\n    sortCourses(sortValue);\r\n\r\n    // Check if no courses are visible\r\n    const visibleCourses = Array.from(courseItems).filter(\r\n      (item) => item.style.display !== 'none'\r\n    );\r\n\r\n    if (visibleCourses.length === 0) {\r\n      // If no courses match filters, show a message\r\n      if (!document.querySelector('.no-courses-message')) {\r\n        const noCoursesMessage = document.createElement('div');\r\n        noCoursesMessage.className = 'no-courses-message';\r\n        noCoursesMessage.textContent = 'No courses match your current filters.';\r\n        noCoursesMessage.style.gridColumn = '1 / -1';\r\n        noCoursesMessage.style.padding = '3rem';\r\n        noCoursesMessage.style.textAlign = 'center';\r\n        noCoursesMessage.style.fontSize = '1.8rem';\r\n        courseGrid.appendChild(noCoursesMessage);\r\n      }\r\n    } else {\r\n      // Remove no courses message if it exists\r\n      const message = document.querySelector('.no-courses-message');\r\n      if (message) {\r\n        message.remove();\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Sorts the currently visible courses\r\n   *\r\n   * @param sortType - The type of sorting to apply ('date' or 'alpha')\r\n   */\r\n  const sortCourses = (sortType: string) => {\r\n    const visibleCourses = Array.from(courseItems).filter(\r\n      (item) => item.style.display !== 'none'\r\n    );\r\n\r\n    // Sort courses based on selected criteria\r\n    visibleCourses.sort((a, b) => {\r\n      if (sortType === 'date') {\r\n        // Sort by date (starting soon first)\r\n        const dateA = a.getAttribute('data-date') || '31-12-9999';\r\n        const dateB = b.getAttribute('data-date') || '31-12-9999';\r\n\r\n        // If both are empty or have the same value\r\n        if (dateA === dateB) return 0;\r\n\r\n        // If either is empty, put courses with no date at the end\r\n        if (!dateA || dateA === '') return 1;\r\n        if (!dateB || dateB === '') return -1;\r\n\r\n        // Parse DD-MM-YYYY dates\r\n        const [dayA, monthA, yearA] = dateA.split('-').map(Number);\r\n        const [dayB, monthB, yearB] = dateB.split('-').map(Number);\r\n\r\n        // Create Date objects (year, month-1, day)\r\n        const dateObjA = new Date(yearA, monthA - 1, dayA);\r\n        const dateObjB = new Date(yearB, monthB - 1, dayB);\r\n\r\n        // Compare timestamps\r\n        return dateObjA.getTime() - dateObjB.getTime();\r\n      } else if (sortType === 'alpha') {\r\n        // Sort alphabetically\r\n        const alphaA = a.getAttribute('data-alpha') || '';\r\n        const alphaB = b.getAttribute('data-alpha') || '';\r\n\r\n        return alphaA.localeCompare(alphaB);\r\n      }\r\n\r\n      return 0;\r\n    });\r\n\r\n    // Reattach sorted elements to the grid\r\n    visibleCourses.forEach((item) => {\r\n      courseGrid.appendChild(item);\r\n    });\r\n  };\r\n\r\n  // Add event listeners to the filter elements\r\n  formatFilter.addEventListener('change', updateCourses);\r\n  availabilityFilter.addEventListener('change', updateCourses);\r\n  sortBySelector.addEventListener('change', updateCourses);\r\n\r\n  // Initialize with default sort/filter\r\n  updateCourses();\r\n});\r\n"],"names":[],"sourceRoot":""}